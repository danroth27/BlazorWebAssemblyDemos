@page "/native/library/advanced"

<PageTitle>Library (Advanced)</PageTitle>

<h1>Library (Advanced)</h1>

<input type="button" @onclick="OnIncrement" value="Increment" />
<input type="button" @onclick="OnDecrememnt" value="Decrement" />

<p>Value: @myInstance.Value</p>

<p>A 10x app? @is10x</p>

@code {
    bool is10x = false;
    MyClass myInstance = new MyClass();

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
            return;

        myInstance.Is10xChanged += i => is10x = i;
    }

    private void OnIncrement()
    {
        myInstance.Value++;
    }

    private void OnDecrememnt()
    {
        myInstance.Value--;
    }

    // a C# wrapper class for the C++ class

    unsafe class MyClass : NativeObject
    {
        private GCHandle callbackHandle;

        public MyClass()
            : base(my_class_new())
        {
            // get a handle to the instance delegate
            var state = GetStateFromDelegate(OnIs10xChanged, out callbackHandle);

            // pass the static callback to C++, and the instance delegate as state
            my_class_set_callback(Handle, OnCallbackProxy, state);
        }

        public int Value
        {
            get => my_class_get_value(Handle);
            set => my_class_set_value(Handle, value);
        }

        public event Action<bool>? Is10xChanged;

        protected virtual void OnIs10xChanged(bool is10x) =>
            Is10xChanged?.Invoke(is10x);

        protected override void Dispose(bool disposing)
        {
            my_class_delete(Handle);
            callbackHandle.Free();
        }

        // native interop methods

        [DllImport("library")] extern static nint my_class_new();
        [DllImport("library")] extern static void my_class_delete(nint obj);
        [DllImport("library")] extern static int my_class_get_value(nint obj);
        [DllImport("library")] extern static void my_class_set_value(nint obj, int value);
        [DllImport("library")] extern static void my_class_set_callback(nint obj, MyCallback callback, nint state);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate void MyCallback([MarshalAs(UnmanagedType.I1)] bool is10x, nint state);

        [MonoPInvokeCallback(typeof(MyCallback))]
        static void OnCallbackProxy([MarshalAs(UnmanagedType.I1)] bool is10x, nint state)
        {
            // get the handle from the state
            var callback = GetDelegateFromState<Action<bool>>(state);

            // invoke the instance delegate
            callback?.Invoke(is10x);
        }
    }
}
